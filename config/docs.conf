[fio]
DESCRIPTIONS = fio是一款非常灵活的io测试工具，它可以通过多线程或进程模拟各种io操作，支持13种不同的I/O引擎，包括:sync,mmap, libaio, posixaio, SG v3, splice, null, network, syslet, guasi, solarisaio 等等。在本测试中，我们关注四种I/O引擎/内存分配方式/是否缓存的组合，分别为：1.I/O引擎为sync，内存分配方>式为malloc，启用缓存；2.I/O引擎为aio，内存分配方式为shm，启用缓存；3.I/O引擎为mmap，内存分配方式为mmap，关闭缓存；4.I/O引擎为splice，内存分配方式为malloc，关闭缓存。测试结果分别parrellel 1/2/3/4。在所有4组测试中，均采用混合随机读写方式，读写比例2：1,即2/3的I/O为随机读，1/3的I/O为随机写，读写数据大小在16K-256K中随机产生，为的是尽可能模拟真实I/O环境。
io = 生成了多少I/O，单位megabytes
aggrb = 本组中所有I/O线程的带宽总和
minb = 本组所有线程中速度最低线程的I/O带宽
maxb = 本组所有线程中速度最高线程的I/O带宽
mint = 本组所有线程中运行时间最短的用时
maxt = 本组所有线程中运行时间最长的用时

[netperf]
DESCRIPTIONS = Netperf是一种网络性能的测量工具，主要针对基于TCP或UDP的传输。Netperf根据应用的不同，可以进行不同模式的网络性能测试，即批量数据传输（bulk data transfer）模式和请求/应答（request/reponse）模式。Netperf测试结果所反映的是一个系统能够以多快的速度向另外一个系统发送数据，以及另外一个系统能够以多块的速度接收数据。Netperf工具以client/server方式工作。server端是netserver，用来侦听来自client端的连接，client端是netperf，用来向server发起网络测试。在client与server之间，首先建立一个控制连接，传递有关测试配置的信息，以及测试的结果；在控制连接建立并传递了测试配置信息以后，client与server之间会再建立一个测试连接，用来来回传递着特殊的流量模式，以测试网络的性能。
TCP_STREAM = 测试过程中,netperf向netserver发送批量的TCP数据分组,以确定数据传输过程中的吞吐量，单位Mbits/秒
UDP_STREAM = 测试过程中,netperf向netserver发送批量的UDP数据分组,以确定数据传输过程中的吞吐量，单位Mbits/秒
TCP_RR = TCP_RR方式的测试对象是多次TCP request和response的交易过程，但是它们发生在同一个TCP连接中，这种模式常常出现在数据库应用中，单位次/秒。
UDP_RR = UDP_RR方式使用UDP分组进行request/response的交易过程。由于没有TCP连接所带来的负担，所以交易率一定会有相应的提升，单位次/秒。
TCP_CRR = TCP_CRR为每次交易建立一个新的TCP连接，最典型的应用就是HTTP，每次HTTP交易是在一条单独的TCP连接中进行的，单位次/秒。

[stream]
DESCRIPTIONS = stream是一款内存带宽测试工具,它通过对数组大小为2000000的矩阵进行COPY、SCALE、ADD、TRIAD四种操作，分别统计每种操作完成时间，除矩阵大小（大小约为45.8MiB）计算出内存的吞吐量
COPY = a(i)=b(i)，访问一个内存单元读出其中的值，再将值写入到另一个内存单元，单位MiB/sec
SCALE = a(i)=q*b(i)，从内存单元读出其中的值，作一个乘法运算，再将结果写入到另一个内存单元，单位MiB/sec
ADD = a(i)=h(i)+c(i)，内存单元读出两个值，做加法运算, 再将结果写入到另一个内存单元，单位MiB/sec
TRIAD = a(i)=b(i)+q*c(i)，从内存单元中读两个值a、b， 对其进行乘加混合运算（a + 因子 * b），将运算结果写入到另一个内存单元，单位MiB/sec

[unixbench]
DESCRIPTIONS = Unixbench是一款面向Linux/unix系统基准性能测试的经典工具，Unixbench测试包含了系统调用、读写、进程、2D、3D、管道、运算、C库等系统基准性能，它的优点在于提供了对系统性能的一种评价体系，为系统评分，如此方便对系统作对比测试，但Unixbench缺乏网络性能测试。Unixbench5测试内容包含了system、2d、3d、misc四大类型，其中system测试系统的一些基本功能，执行时最大并行数为16；2d测试2D图形加速，执行时最大并行数为1；3d测试3D加速，执行时最大并行数为1；misc指诸如字符，整型等测试，最大并行数为16，且属于“Non-Index Benchmarks”。Unixbench测试指标分为两类，一类即Unixbench测试的真实数据，另类为“Index”。Unixbench对于某些测试项设定了基础值（BASELINE）,真实值称为RESULT，Index=RESULT/BASELINE * 10。需要注意的是并不是所有的测试项都有Index,上面提到的misc类型的测试项就不含有Index。从上可知，Index也是一种ratio值,采用ratio值可以使测试结果更加直观
Dhrystone2-using-register-variables = 整型运算，一秒钟内寄存器运算次数（10s）。这里为index值
Double-Precision-Whetstone = 浮点型运算,whetsone为cpu测试程序，单位MWIPS。这里为index值
Execl-Throughput = 一秒钟内，execl调用次数（30秒）。这里为index值
FileCopy1024-bufsize2000-maxblocks = 1024 bufsize写性能, 单位KiB/sec。这里为index值
FileCopy256-bufsize500-maxblocks =  256 bufsize写性能, 单位KiB/sec。这里为index值
FileCopy4096-bufsize8000-maxblocks = 4096 bufsize写性能, 单位KiB/sec。这里为index值
Pipe-Throughput = 每秒一个进程可以向一个管道写 512 字节数据然后再读回的次数（共10秒）。这里为index值
Pipe-based-ContextSwitching = 一秒钟内，两个进程通过pipe向对方发送消息的次数（30秒）。这里为index值
Process-Creation = 一秒钟内，进程创建和收获子进程退出的次数（10秒）。这里为index值
ShellScripts-1concurrent = 一秒钟内，脚本程序1并行执行完成次数（60秒）。这里为index值
ShellScripts-8concurrent = 一秒钟内，脚本程序8并行执行完成次数（60秒）。这里为index值
System-Call-Overhead = 系统调用，一秒钟内反复调用getid函数测算访问内核空间的次数（10秒）。这里为index值
System-Benchmarks-Index-Score = 一项综合评价指标, 可以用于评价整个操作系统的性能。这里为index值

[pingpong]
DESCRIPTIONS = pingpong是一款评价线程处理能力较好的工具,它通过线程模拟乒乓游戏，统计多组乒乓赛事延时，模拟一组乒乓比赛需要两个线程， pingpong默认将测试128、256、512线程的处理延时。也可通过修改测试脚本，测试其他线程数的处理延时
initialised = 线程初始化时间，单位微秒
completed = 线程从运行到结束时间， 单位微秒
total = 线程从初始化到结束时间，单位微秒

[dbench_fio]
DESCRIPTIONS = dbench能够模拟文件系统的操作流，dbench引入一个非常重要的文件，loadfile,loadfile就是模拟实际情况的操步骤的文件，比如读、写、打开、关闭等动作。它可以模拟本地文件系统；也可以模拟网络文件系统NFS(CIFS)；还可以模拟如sockio,scsi,iscsi。dbench可以对文件系统或服务进行工作流的压力测试，以此判断文件系统的性能和服务（如NFS）的处理能力。dbench在模拟生产环境更具有意义
Throughtput = 文件系统小文件操作吞吐量，单位MiB/sec
max_latency = IO操作最大完成时间，单位ms(微秒)

[iozone]
DESCRIPTIONS = iozone是一款文件系统性能测试工具，它衡量多种文件操作的性能。iozone支持多种硬件架构和操系统，几乎支持所有的硬件架构
write = 测试向一个新文件写入的性能。当一个新文件被写入时，不仅仅是那些文件中的数据需要被存储，还包括那些用于定位数据存储在存储介质的具体位置的额外信息。这些额外信息被称作“元数据”。它包括目录信息，所分配的空间和一些与该文件有关但又并非该文件所含数据的其他数据。拜这些额外信息所赐，Write的性能通常会比Re-write的性能低, 单位KiB/sec
rewrite= 测试向一个已存在的文件写入的性能。当一个已存在的文件被写入时，所需工作量较少，因为此时元数据已经存在。rewrite的性能通常比write的性能高, 单位KiB/sec
read=测试读一个已存在的文件的性能, 单位KiB/sec
reread = 测试读一个最近读过的文件的性能。reread性能会高些，因为操作系统通常会缓存最近读过的文件数据。这个缓存可以被用于读,以提高性能, 单位KiB/sec
randread=测试读一个文件中的随机偏移量的性能。许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他, 单位KiB/sec
randwrite: 测试写一个文件中的随机偏移量的性能。同样，许多因素可能影响这种情况下的系统性能，例如：操作系统缓存的大小，磁盘数量，寻道延迟和其他, 单位KiB/sec

[x11perf]
DESCRIPTIONS = 2D图形渲染性能测试
aa-polygon = 多边形性能， 单位: 个/sec
ellipses = 绘制椭圆性能， 单位: 个/sec
images-and-blits = 位块移动性能， 单位: 个/sec
rectangles = 绘制矩形性能， 单位：个/sec
text= 文本框操作性能， 单位: 个/sec
windows = 窗口操作性能， 单位: 个/sec

[glxgears]
DESCRIPTIONS = glxgears是一个测试Linux 2D、3D性能的测试软件。程序执行时将弹出一个窗口，里面有三个转动的齿轮，屏幕将显示出每五秒钟转动多少栅。OpenGL对3D显示性能影响较大，测试之前首先查询OpenGL是否打开:"glxinfo | grep rendering",如果显示direct rendiering:yes表明已经开启OpenGL
gears = 应采用unixbench框架测试glxgears, 单位为FPS

[bonnie]
DESCRIPTIONS = bonnie++是一个硬盘和文件系统的基准性能测试工具，它通过一系列的简单测试来生成硬盘和文件系统的性能报告。文件系统的测试，bonnie++提供两种风格的测试，针对单个文件的数据库风格的访问测试和针对大量小文件的创建和删除来模拟文件操作流
putc = putc()函数，每次一个字符，顺序写入，完成整个文件(KiB/s)
putc_cpu = putc，cpu资源占用率
put_block = write(),每次一个块，顺序写入，完成整个文件(KiB/s)
put_block_cpu= put_block，cpu资源占用率
rewrite= 每次读出一个块，修改其中一个字节，然后写回(KiB/s)
rewrite_cpu= rewrite, cpu资源占用率
getc= getc()函数，每次一个字符，顺序读出，完成整个文件(KiB/s)
getc_cpu= getc, cpu资源占用率
get_block= read(),每次一个块，顺序读出，完成整个文件(KiB/s)
get_block_cpu= get_block, cpu资源占用率
seeks= 随机寻道(数/sec)
seeks_cpu= seeks, cpu资源占用率
seq_create= 顺序创建文件数（个/sec）
seq_create_cpu= seq_create, cpu资源占用率
seq_stat= 顺序遍历所有文件，读取文件属性，如果文件大小不为0，还要对文件内容进行读取(个/sec)
seq_stat_cpu = seq_stat, cpu资源占用率
seq_del= 顺序删除所有文件(个/sec)
seq_del_cpu = seq_del, cpu资源占用率
ran_create= 随机创建文件数（个/sec）
ran_create_cpu = ran_create, cpu资源占用率
ran_stat =  随机遍历所有文件(个/sec)
ran_stat_cpu = ran_stat, cpu资源占用率
ran_del = 随机删除所有文件(个/sec)
ran_del_cpu = ran_del, cpu资源占用率

[lmbench]
DESCRIPTIONS = lmbench是一个linux基准性能测试工具，覆盖了cpu、IO、Mem、Net等方面
